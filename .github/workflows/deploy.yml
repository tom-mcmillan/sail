name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: sail-mcp-production
  REGION: us-central1
  SERVICE_NAME: sail-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm run test

    - name: Run backend linting
      run: |
        cd backend
        npm run lint

    - name: Type check backend
      run: |
        cd backend
        npm run type-check

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Type check frontend
      run: |
        cd frontend
        npm run type-check

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and push backend image
      run: |
        cd backend
        docker build -t gcr.io/$PROJECT_ID/sail-backend:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/sail-backend:$GITHUB_SHA
        docker tag gcr.io/$PROJECT_ID/sail-backend:$GITHUB_SHA gcr.io/$PROJECT_ID/sail-backend:latest
        docker push gcr.io/$PROJECT_ID/sail-backend:latest

    - name: Build and push frontend image
      run: |
        cd frontend
        docker build \
          --build-arg NEXT_PUBLIC_API_URL=https://sailmcp.com/api \
          --build-arg NEXT_PUBLIC_BASE_URL=https://sailmcp.com \
          --build-arg NODE_ENV=production \
          -t gcr.io/$PROJECT_ID/sail-frontend:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/sail-frontend:$GITHUB_SHA
        docker tag gcr.io/$PROJECT_ID/sail-frontend:$GITHUB_SHA gcr.io/$PROJECT_ID/sail-frontend:latest
        docker push gcr.io/$PROJECT_ID/sail-frontend:latest

    - name: Deploy backend to Cloud Run
      run: |
        gcloud run deploy sail-backend \
          --image gcr.io/$PROJECT_ID/sail-backend:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --min-instances 1 \
          --max-instances 100 \
          --cpu 2 \
          --memory 2Gi \
          --timeout 900 \
          --set-env-vars NODE_ENV=production,PORT=8080,BASE_URL=https://sailmcp.com,FRONTEND_URL=https://sailmcp.com \
          --set-secrets DATABASE_URL=database-credentials:latest,REDIS_URL=redis-credentials:latest,JWT_SECRET=app-secrets:latest

    - name: Deploy frontend to Cloud Run
      run: |
        gcloud run deploy sail-frontend \
          --image gcr.io/$PROJECT_ID/sail-frontend:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --min-instances 0 \
          --max-instances 50 \
          --cpu 1 \
          --memory 1Gi \
          --set-env-vars NODE_ENV=production,NEXT_PUBLIC_API_URL=https://sailmcp.com/api,NEXT_PUBLIC_BASE_URL=https://sailmcp.com

    - name: Update traffic to new revision
      run: |
        gcloud run services update-traffic sail-backend --to-latest --region $REGION
        gcloud run services update-traffic sail-frontend --to-latest --region $REGION

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi